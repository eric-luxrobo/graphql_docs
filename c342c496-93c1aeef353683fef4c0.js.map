{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-apollo-docs/src/components/typescript-api-box.js"],"names":["Container","border","colors","divider","borderRadius","margin","overflow","Header","padding","backgroundColor","background","MainHeading","StyledCode","Subheading","Body","BodySubheading","smallCaps","StyledTerm","StyledDescription","fontSize","_summary","rawData","comment","shortText","signatures","_isReflectedProperty","data","kindString","type","_parameterString","names","leftDelim","rightDelim","join","_typeId","fullName","name","isReadableName","substring","Code","withProps","className","mdToReact","text","sanitized","replace","remark","use","remark2react","remarkReactComponents","code","processSync","contents","TypescriptApiBox","_typeName","isArray","typeNames","i","types","length","typeName","push","referencedData","dataByKey","declaration","children","_type","value","skipSignature","Array","parameters","map","indexSignature","signature","_indexParameterString","console","error","typeArguments","_parameter","param","description","templateArgs","this","_parameters","split","partition","groups","members","properties","_objectProperties","id","_signature","summary","repo","filepath","context","filepathPrefix","sources","fileName","lineno","line","parameterString","extend","concat","dataForSignature","escapedName","escape","returnType","originalName","dataForProperties","isOptions","optional","defaultValue","render","props","args","title","href","target","rel","filter","group","index","key","member","traverse","tree","parentName","includes","forEach","child","Component","TypescriptApiBoxContext","createContext","contextType"],"mappings":"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","file":"c342c496-93c1aeef353683fef4c0.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React, {Component, Fragment, createContext} from 'react';\nimport extend from 'lodash/extend';\nimport partition from 'lodash/partition';\nimport remark from 'remark';\nimport remark2react from 'remark-react';\nimport styled from '@emotion/styled';\nimport withProps from 'recompose/withProps';\nimport {colors, smallCaps} from 'gatsby-theme-apollo-core';\n\nconst Container = styled.div({\n  border: `1px solid ${colors.divider}`,\n  borderRadius: 4,\n  margin: '1.5em 0',\n  overflow: 'hidden'\n});\n\nconst Header = styled.div({\n  padding: '1.25rem',\n  backgroundColor: colors.background\n});\n\nconst MainHeading = styled.h4({\n  marginBottom: 0\n});\n\nconst StyledCode = styled.code({\n  padding: '0 !important',\n  background: 'none !important'\n});\n\nconst Subheading = styled.h6({\n  marginTop: 12,\n  marginBottom: 0\n});\n\nconst Body = styled.div({\n  padding: '1.25rem'\n});\n\nconst BodySubheading = styled.h6(smallCaps, {\n  fontWeight: 'bold'\n});\n\nconst StyledTerm = styled.dt({\n  marginBottom: 8,\n  fontFamily: \"'Source Code Pro', monospace\",\n  fontWeight: 'normal'\n});\n\nconst StyledDescription = styled.dd({\n  fontSize: '0.5em',\n  [['p', 'li']]: {\n    fontSize: '1rem'\n  }\n});\n\nfunction _summary(rawData) {\n  if (rawData.comment) {\n    return rawData.comment.shortText;\n  }\n  return (\n    rawData.signatures &&\n    rawData.signatures[0].comment &&\n    rawData.signatures[0].comment.shortText\n  );\n}\n\nfunction _isReflectedProperty(data) {\n  return (\n    data.kindString === 'Property' &&\n    data.type &&\n    data.type.type === 'reflection'\n  );\n}\n\nfunction _parameterString(names, leftDelim, rightDelim) {\n  leftDelim = leftDelim || '(';\n  rightDelim = rightDelim || ')';\n  return leftDelim + names.join(', ') + rightDelim;\n}\n\nfunction _typeId(type) {\n  return type.fullName || type.name;\n}\n\nfunction isReadableName(name) {\n  return name.substring(0, 2) !== '__';\n}\n\nconst Code = withProps({\n  className: 'language-'\n})('code');\n\nfunction mdToReact(text) {\n  const sanitized = text.replace(/\\{@link (\\w*)\\}/g, '[$1](#$1)');\n  return remark()\n    .use(remark2react, {\n      remarkReactComponents: {\n        code: Code\n      }\n    })\n    .processSync(sanitized).contents;\n}\n\nexport class TypescriptApiBox extends Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired\n  };\n\n  get dataByKey() {\n    const dataByKey = {};\n\n    function traverse(tree, parentName) {\n      let {name} = tree;\n      if (['Constructor', 'Method', 'Property'].includes(tree.kindString)) {\n        name = `${parentName}.${tree.name}`;\n        // add the parentName to the data so we can reference it for ids\n        tree.parentName = parentName;\n        tree.fullName = name;\n      }\n\n      dataByKey[name] = tree;\n\n      if (tree.children) {\n        tree.children.forEach(child => {\n          traverse(child, name);\n        });\n      }\n    }\n\n    traverse(this.context.data);\n\n    return dataByKey;\n  }\n\n  templateArgs(rawData) {\n    const parameters = this._parameters(rawData, this.dataByKey);\n    const split = partition(parameters, 'isOptions');\n\n    const groups = [];\n    if (split[1].length > 0) {\n      groups.push({\n        name: 'Arguments',\n        members: split[1]\n      });\n    }\n    if (split[0].length > 0) {\n      groups.push({\n        name: 'Options',\n        // the properties of the options parameter are the things listed in this group\n        members: split[0][0].properties\n      });\n    }\n\n    if ('Interface' === rawData.kindString) {\n      groups.push({\n        name: 'Properties',\n        members: this._objectProperties(rawData)\n      });\n    }\n\n    let type;\n    if ('Type alias' === rawData.kindString) {\n      // this means it's an object type\n      if (rawData.type.declaration && rawData.type.declaration.children) {\n        groups.push({\n          name: 'Properties',\n          members: this._objectProperties(rawData.type.declaration)\n        });\n      } else {\n        type = this._type(rawData);\n      }\n    }\n\n    return {\n      id: _typeId(rawData),\n      name: rawData.name,\n      type,\n      signature: this._signature(rawData, parameters),\n      summary: _summary(rawData),\n      groups,\n      repo: 'apollostack/apollo-client',\n      filepath: this.context.filepathPrefix + rawData.sources[0].fileName,\n      lineno: rawData.sources[0].line\n    };\n  }\n\n  // This is just literally the name of the type, nothing fancy, except for references\n  _typeName = type => {\n    if (type.type === 'instrinct') {\n      if (type.isArray) {\n        return '[' + type.name + ']';\n      }\n      return type.name;\n    } else if (type.type === 'union') {\n      const typeNames = [];\n      for (let i = 0; i < type.types.length; i++) {\n        // Try to get the type name for this type.\n        const typeName = this._typeName(type.types[i]);\n        // Propogate undefined type names by returning early. Otherwise just add the\n        // type name to our array.\n        if (typeof typeName === 'undefined') {\n          return;\n        } else {\n          typeNames.push(typeName);\n        }\n      }\n      // Join all of the types together.\n      return typeNames.join(' | ');\n    } else if (type.type === 'reference') {\n      // check to see if the reference type is a simple type alias\n      const referencedData = this.dataByKey[type.name];\n      if (referencedData && referencedData.kindString === 'Type alias') {\n        // Is it an \"objecty\" type? We can't display it in one line if so\n        if (\n          !referencedData.type.declaration ||\n          !referencedData.type.declaration.children\n        ) {\n          return this._type(referencedData);\n        }\n      }\n\n      // it used to be this: return _link(_typeId(type), type.name);\n      return _typeId(type);\n    } else if (type.type === 'stringLiteral') {\n      return '\"' + type.value + '\"';\n    }\n  };\n\n  _objectProperties(rawData) {\n    const signatures = Array.isArray(rawData.indexSignature)\n      ? rawData.indexSignature\n      : [];\n    return signatures\n      .map(signature => {\n        const parameterString = this._indexParameterString(signature);\n        return extend(this._parameter(signature), {name: parameterString});\n      })\n      .concat(rawData.children.map(this._parameter));\n  }\n\n  _indexParameterString(signature) {\n    const parameterNamesAndTypes = signature.parameters.map(\n      param => param.name + ':' + this._typeName(param.type)\n    );\n    return _parameterString(parameterNamesAndTypes, '[', ']');\n  }\n\n  // Render the type of a data object. It's pretty confusing, to say the least\n  _type = (data, skipSignature) => {\n    const {type} = data;\n\n    if (data.kindString === 'Method') {\n      return this._type(data.signatures[0]);\n    }\n\n    if (data.kindString === 'Call signature' && !skipSignature) {\n      const paramTypes = Array.isArray(data.parameters)\n        ? data.parameters.map(this._type)\n        : [];\n      const args = '(' + paramTypes.join(', ') + ')';\n      return args + ' => ' + this._type(data, true);\n    }\n\n    const isReflected =\n      data.kindString === 'Type alias' || type.type === 'reflection';\n    if (isReflected && type.declaration) {\n      const {declaration} = type;\n      if (declaration.signatures) {\n        return this._type(declaration.signatures[0]);\n      }\n\n      if (declaration.indexSignature) {\n        const signature = declaration.indexSignature[0];\n        return (\n          this._indexParameterString(signature) + ':' + this._type(signature)\n        );\n      }\n    }\n\n    let typeName = this._typeName(type);\n    if (!typeName) {\n      console.error(\n        'unknown type name for',\n        data.name,\n        'using the type name `any`'\n      );\n      // console.trace();\n      typeName = 'any';\n    }\n\n    if (type.typeArguments) {\n      return (\n        typeName +\n        _parameterString(type.typeArguments.map(this._typeName), '<', '>')\n      );\n    }\n    return typeName;\n  };\n\n  // XXX: not sure whether to use the 'kind' enum from TS or just run with the\n  // strings. Strings seem safe enough I guess\n  _signature(rawData, parameters) {\n    let dataForSignature = rawData;\n    if (_isReflectedProperty(rawData)) {\n      dataForSignature = rawData.type.declaration;\n    }\n\n    const escapedName = escape(rawData.name);\n\n    // if it is a function, and therefore has arguments\n    const signature =\n      dataForSignature.signatures && dataForSignature.signatures[0];\n    if (signature) {\n      const {name} = rawData;\n      const parameterString = _parameterString(\n        parameters.map(param => param.name)\n      );\n      let returnType = '';\n      if (rawData.kindString !== 'Constructor') {\n        const type = this._type(signature, true);\n        if (type !== 'void') {\n          returnType = ': ' + this._type(signature, true);\n        }\n      }\n\n      return name + parameterString + returnType;\n    }\n\n    return escapedName;\n  }\n\n  _parameter = param => ({\n    name: param.name,\n    type: this._type(param),\n    description:\n      param.comment && (param.comment.text || param.comment.shortText)\n  });\n\n  // Takes the data about a function / constructor and parses out the named params\n  _parameters(rawData, dataByKey) {\n    if (_isReflectedProperty(rawData)) {\n      return this._parameters(rawData.type.declaration, dataByKey);\n    }\n\n    const signature = rawData.signatures && rawData.signatures[0];\n    if (!signature || !Array.isArray(signature.parameters)) {\n      return [];\n    }\n\n    return signature.parameters.map(param => {\n      let name;\n      if (isReadableName(param.name)) {\n        name = param.name;\n      } else if (isReadableName(param.originalName)) {\n        name = param.originalName;\n      } else {\n        // XXX: not sure if this is the correct logic, but it feel OK\n        name = 'options';\n      }\n\n      let properties = [];\n      if (param.type && param.type.declaration) {\n        properties = Array.isArray(param.type.declaration.children)\n          ? param.type.declaration.children.map(this._parameter)\n          : [];\n      } else if (param.type && param.type.type === 'reference') {\n        const dataForProperties = dataByKey[param.type.name] || {};\n        properties = Array.isArray(dataForProperties.children)\n          ? dataForProperties.children.map(this._parameter)\n          : [];\n      }\n\n      return extend(this._parameter(param), {\n        name,\n        isOptions: name === 'options',\n        optional: !!param.defaultValue,\n        properties\n      });\n    });\n  }\n\n  render() {\n    const rawData = this.dataByKey[this.props.name];\n    const args = this.templateArgs(rawData);\n    return (\n      <Container>\n        <Header>\n          <MainHeading title={args.name} id={args.id}>\n            <StyledCode className=\"language-\">\n              <a href={`#${args.id}`}>{args.signature}</a>\n            </StyledCode>\n          </MainHeading>\n          {args.filepath && (\n            <Subheading>\n              <a\n                href={`https://github.com/${args.repo}/blob/master/${args.filepath}#L${args.lineno}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                ({args.filepath}, line {args.lineno})\n              </a>\n            </Subheading>\n          )}\n        </Header>\n        <Body>\n          {args.summary && mdToReact(args.summary)}\n          {args.type && <div>{args.type}</div>}\n          {args.groups\n            .filter(group => group.members.length)\n            .map((group, index) => (\n              <Fragment key={index}>\n                <BodySubheading>{group.name}</BodySubheading>\n                <dl>\n                  {group.members.map((member, index) => (\n                    <Fragment key={index}>\n                      <StyledTerm>\n                        {member.name} {member.type}\n                      </StyledTerm>\n                      {member.description && (\n                        <StyledDescription>\n                          {mdToReact(member.description)}\n                        </StyledDescription>\n                      )}\n                    </Fragment>\n                  ))}\n                </dl>\n              </Fragment>\n            ))}\n        </Body>\n      </Container>\n    );\n  }\n}\n\nexport const TypescriptApiBoxContext = createContext();\nTypescriptApiBox.contextType = TypescriptApiBoxContext;\n"],"sourceRoot":""}